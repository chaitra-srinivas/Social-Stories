[{"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\index.js":"1","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\reportWebVitals.js":"2","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\App.js":"3","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\pages\\Home.js":"4","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\queries.js":"5","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\mutations.js":"6","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryList.js":"7","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryAdd.js":"8","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInfo.js":"9","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryEdit.js":"10","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryPages.js":"11","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryContent.js":"12","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInput.js":"13"},{"size":542,"mtime":1642728445730,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1642314124616,"results":"16","hashOfConfig":"15"},{"size":1886,"mtime":1643068532734,"results":"17","hashOfConfig":"15"},{"size":165,"mtime":1642725802154,"results":"18","hashOfConfig":"15"},{"size":658,"mtime":1643356698239,"results":"19","hashOfConfig":"15"},{"size":1198,"mtime":1643356723235,"results":"20","hashOfConfig":"15"},{"size":991,"mtime":1643329204065,"results":"21","hashOfConfig":"15"},{"size":3916,"mtime":1643412244410,"results":"22","hashOfConfig":"15"},{"size":1765,"mtime":1643359966956,"results":"23","hashOfConfig":"15"},{"size":4061,"mtime":1643355288886,"results":"24","hashOfConfig":"15"},{"size":832,"mtime":1643172717574,"results":"25","hashOfConfig":"15"},{"size":1247,"mtime":1643355983348,"results":"26","hashOfConfig":"15"},{"size":2386,"mtime":1643412892338,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"zpfcfd",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\index.js",[],["59","60"],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\reportWebVitals.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\App.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\pages\\Home.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\queries.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\mutations.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryList.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryAdd.js",["61","62","63","64"],"import { React, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CREATE_STORY } from \"../../utils/mutations\";\r\nimport { GET_STORIES } from \"../../utils/queries\";\r\nimport StoryPages from \"./StoryPages\";\r\nimport StoryInput from \"./StoryInput\";\r\nimport StoryContent from \"./StoryContent\";\r\n\r\nconst templates = require(\"./templates.json\");\r\n\r\nfunction StoryAdd() {\r\n  let { title, content } = useParams;\r\n\r\n  let selectedTemplate = templates[0];\r\n\r\n  const [dynamicContent, setDynamicContent] = useState([]);\r\n\r\n  const [selectedPage, setSelectedPage] = useState(selectedTemplate.pages[0]);\r\n\r\n  /* function createVariablesModel(template) {\r\n    return template.pages.flatMap((page) =>\r\n      page.variables.map((variable) => ({\r\n        pageId: page.id,\r\n        varId: variable.id,\r\n        varDescription: variable.description,\r\n        value: variable.defaultValue,\r\n      }))\r\n    );\r\n  } */\r\n  function createVariablesModel(template) {\r\n    return template.pages.map((page) => {\r\n      return {\r\n        id: page.id,\r\n        content: page.content,\r\n        image: page.image,\r\n        variables: page.variables.map((variable) => ({\r\n          id: variable.id,\r\n          value: variable.defaultValue,\r\n        })),\r\n      };\r\n    });\r\n  }\r\n\r\n  const [variablesModel, setVariablesModel] = useState(\r\n    createVariablesModel(selectedTemplate)\r\n  );\r\n\r\n  function pageSelected(page) {\r\n    setSelectedPage(page);\r\n  }\r\n\r\n  function variablesUpdated(varModel) {\r\n    setVariablesModel(varModel);\r\n  }\r\n\r\n  function saveStory() {\r\n    const pagesToSave = selectedTemplate.pages.map((p) => {\r\n      let pageVariablesModel = variablesModel.find((f) => f.id === p.id);\r\n      return {\r\n        id: p.id,\r\n        image: pageVariablesModel.image,\r\n        content: pageVariablesModel.content,\r\n        variables: p.variables.map((v) => {\r\n          return {\r\n            id: v.id,\r\n            name: v.name,\r\n            description: v.description,\r\n            value: pageVariablesModel.variables.find((f) => f.id === v.id)\r\n              .value,\r\n          };\r\n        }),\r\n      };\r\n    });\r\n\r\n    createStory({\r\n      variables: {\r\n        templateId: \"t001\",\r\n        title: title.value,\r\n        pages: pagesToSave,\r\n      },\r\n      refetchQueries: [{ query: GET_STORIES }],\r\n    });\r\n  }\r\n\r\n  // StoryAdd\r\n\r\n  const [createStory, { loading, error }] = useMutation(CREATE_STORY);\r\n\r\n  if (loading) return \"Loading...\";\r\n  if (error) return `Submission error! ${error.message}`;\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ float: \"left\", width: \"300px\" }}>\r\n        <StoryPages\r\n          pages={selectedTemplate.pages}\r\n          pageSelected={pageSelected}\r\n        />\r\n      </div>\r\n      <form\r\n        style={{ float: \"right\", width: \"700px\" }}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}>\r\n        <div className='form-group'>\r\n          <label>Title:</label>\r\n          <input\r\n            type='text'\r\n            className='form-control'\r\n            ref={function (node) {\r\n              return (title = node);\r\n            }}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <StoryInput\r\n            selectedPage={selectedPage}\r\n            variablesModel={variablesModel}\r\n            variablesUpdated={variablesUpdated}\r\n          />\r\n          {/*     <StoryContent dynamicContent={prepareDynamicContent}/> */}\r\n        </div>\r\n        <div>\r\n          <p className='btn-group'>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-primary'\r\n              onClick={saveStory}>\r\n              Submit\r\n            </button>\r\n            <Link to='/stories' className='btn btn-secondary'>\r\n              Cancel\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoryAdd;\r\n","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInfo.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryEdit.js",["65"],"import React from \"react\";\r\nimport { Mutation } from \"@apollo/client/react/components\";\r\nimport { GET_STORY, GET_STORIES } from \"../../utils/queries\";\r\nimport { UPDATE_STORY } from \"../../utils/mutations\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\n\r\nfunction StoryEdit(props) {\r\n  let { id } = useParams();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  let title, content;\r\n  function handleCancel(id) {\r\n    navigate(`/stories/${id}`);\r\n  }\r\n\r\n  const { loading, data } = useQuery(GET_STORY, { variables: { id: id } });\r\n  const [updateStory, { dataloading, error }] = useMutation(UPDATE_STORY);\r\n  const singleStory = data?.story || {};\r\n\r\n  console.log(singleStory.pages[0].variables);\r\n\r\n  if (loading || dataloading) return \"Loading...\";\r\n  if (error) return `Submission error! ${error.message}`;\r\n\r\n  function editStory() {\r\n    const pagesToUpdate = singleStory.pages.map((p) => {\r\n      return {\r\n        id: p.id,\r\n        content: p.content,\r\n        variables: p.variables.map((v) => {\r\n          return {\r\n            id: v.id,\r\n            name: v.name,\r\n            description: v.description,\r\n            value: v.value,\r\n          };\r\n        }), \r\n      };\r\n    });\r\n\r\n     updateStory({\r\n      variables: {\r\n        id: singleStory.id,\r\n        templateId: \"t001\",\r\n        title: title.value,\r\n        pages: pagesToUpdate,\r\n      },\r\n        refetchQueries: [{ query: GET_STORIES }],\r\n    }); \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Edit {singleStory.title}</h1>\r\n      <Mutation mutation={UPDATE_STORY}>\r\n        {function (updateStory, { loading, data, error }) {\r\n          return (\r\n            <div>\r\n              <form\r\n                onSubmit={function (event) {\r\n                  event.preventDefault();\r\n                  /*  updateStory({\r\n                    variables: {\r\n                      id: singleStory.id,\r\n                      templateId: singleStory.templateId,\r\n                      title: title.value,\r\n                      pages: singleStory.pages,\r\n                    },\r\n                  }); */\r\n                  navigate(`/stories/${singleStory.id}`);\r\n                }}>\r\n                <div className='form-group'>\r\n                  <label>Title</label>\r\n                  <input\r\n                    type='text'\r\n                    className='form-control'\r\n                    defaultValue={singleStory.title}\r\n                    ref={function (node) {\r\n                      return (title = node);\r\n                    }}\r\n                  />\r\n                </div>\r\n                {singleStory.pages.map((page) => {\r\n                  return (\r\n                    <div key={page.id} className='form-group'>\r\n                     <div>\r\n                       <label></label>\r\n                     </div>\r\n                      <input\r\n                        type='text'\r\n                        className='form-control'\r\n                        defaultValue={page.content}\r\n                        ref={function (node) {\r\n                          return (content = node);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n\r\n                <div className='btn-group'>\r\n                  <button\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={editStory}>\r\n                    Update\r\n                  </button>\r\n                  <button\r\n                    type='button'\r\n                    className='btn btn-secondary'\r\n                    onClick={function () {\r\n                      handleCancel(singleStory.id);\r\n                    }}>\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              {loading && <p>Loading...</p>}\r\n              {error && <p>Error : {error.message}</p>}\r\n            </div>\r\n          );\r\n        }}\r\n      </Mutation>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoryEdit;\r\n","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryPages.js",["66","67"],"import { React, useState } from \"react\";\r\n\r\nfunction StoryPages(props) {\r\n  const  pages  = props.pages;\r\n  const  pageSelected  = props.pageSelected;\r\n  \r\n  const [selectedPage, setSelectedPage] = useState(pages[0]);\r\n\r\n let links = pages.map((page)=>{\r\n    return (\r\n        <div key={page.id}>\r\n               <a\r\n                 href='#'\r\n                 onClick={(e) => {\r\n                   e.preventDefault();\r\n                  setSelectedPage(page);\r\n                  pageSelected(page);\r\n                 }}>\r\n                 {page.title}\r\n               </a>\r\n               <br />\r\n               <span>{page.description}</span> <br />\r\n             </div>\r\n         );\r\n  })\r\n\r\n  return(\r\n      <div>\r\n        <ul>\r\n          <li>{links}</li>\r\n        </ul>\r\n      </div>\r\n  )\r\n\r\n  \r\n}\r\nexport default StoryPages;\r\n","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryContent.js",["68","69","70"],"import { React, useState } from \"react\";\r\n\r\nconst templates = require(\"./templates.json\");\r\n\r\nfunction StoryContent(props) {\r\n  let selectedTemplate = templates[0];\r\n\r\n  const { storyContent } = props; \r\n\r\n  console.log(selectedTemplate + \"From storyContent\");\r\n\r\n  const [selectedPage, setSelectedPage] = useState(selectedTemplate.pages[0]);\r\n  const [dynamicContent, setDynamicContent] = useState(storyContent);\r\n\r\n  console.log(selectedTemplate);\r\n  let pageVariables = selectedTemplate.pages.flatMap((page) =>\r\n    page.variables.map((v) => ({ id: page.id + \"-\" + v.id, value: \"1\" }))\r\n  );\r\n  const [variableValues, setVariableValues] = useState(pageVariables);\r\n  console.log(variableValues);\r\n\r\n  function prepareDynamicContent() {\r\n    let content = selectedPage.content;\r\n    selectedPage.variables.forEach((variable) => {\r\n      content = content.replace(\r\n        variable.name,\r\n        variableValues.find((f) => f.id === selectedPage.id + \"-\" + variable.id)\r\n          .value\r\n      );\r\n    });\r\n    setDynamicContent(content);\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <p>Page content here:</p>\r\n    \r\n      <div dangerouslySetInnerHTML={{ __html: dynamicContent }}>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoryContent;\r\n","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInput.js",["71","72"],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":8,"column":8,"nodeType":"79","messageId":"80","endLine":8,"endColumn":20},{"ruleId":"77","severity":1,"message":"81","line":13,"column":16,"nodeType":"79","messageId":"80","endLine":13,"endColumn":23},{"ruleId":"77","severity":1,"message":"82","line":17,"column":10,"nodeType":"79","messageId":"80","endLine":17,"endColumn":24},{"ruleId":"77","severity":1,"message":"83","line":17,"column":26,"nodeType":"79","messageId":"80","endLine":17,"endColumn":43},{"ruleId":"77","severity":1,"message":"81","line":13,"column":14,"nodeType":"79","messageId":"80","endLine":13,"endColumn":21},{"ruleId":"77","severity":1,"message":"84","line":7,"column":10,"nodeType":"79","messageId":"80","endLine":7,"endColumn":22},{"ruleId":"85","severity":1,"message":"86","line":12,"column":16,"nodeType":"87","endLine":18,"endColumn":21},{"ruleId":"77","severity":1,"message":"88","line":12,"column":24,"nodeType":"79","messageId":"80","endLine":12,"endColumn":39},{"ruleId":"77","severity":1,"message":"89","line":19,"column":26,"nodeType":"79","messageId":"80","endLine":19,"endColumn":43},{"ruleId":"77","severity":1,"message":"90","line":22,"column":12,"nodeType":"79","messageId":"80","endLine":22,"endColumn":33},{"ruleId":"77","severity":1,"message":"78","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":12,"column":3,"nodeType":"79","endLine":12,"endColumn":12,"suggestions":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'StoryContent' is defined but never used.","Identifier","unusedVar","'content' is assigned a value but never used.","'dynamicContent' is assigned a value but never used.","'setDynamicContent' is assigned a value but never used.","'selectedPage' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setSelectedPage' is assigned a value but never used.","'setVariableValues' is assigned a value but never used.","'prepareDynamicContent' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDynamicContent'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [getDynamicContent] as a second argument to the useEffect Hook.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},"Add dependencies array: [getDynamicContent]",{"range":"99","text":"100"},[479,479],", [getDynamicContent]"]