[{"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\index.js":"1","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\reportWebVitals.js":"2","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\App.js":"3","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\pages\\Home.js":"4","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\queries.js":"5","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\mutations.js":"6","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryList.js":"7","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryAdd.js":"8","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInfo.js":"9","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryEdit.js":"10","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryPages.js":"11","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryContent.js":"12","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInput.js":"13"},{"size":542,"mtime":1642728445730,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1642314124616,"results":"16","hashOfConfig":"15"},{"size":1886,"mtime":1643068532734,"results":"17","hashOfConfig":"15"},{"size":165,"mtime":1642725802154,"results":"18","hashOfConfig":"15"},{"size":658,"mtime":1643356698239,"results":"19","hashOfConfig":"15"},{"size":1198,"mtime":1643356723235,"results":"20","hashOfConfig":"15"},{"size":991,"mtime":1643329204065,"results":"21","hashOfConfig":"15"},{"size":3497,"mtime":1643429240592,"results":"22","hashOfConfig":"15"},{"size":1726,"mtime":1643430019717,"results":"23","hashOfConfig":"15"},{"size":3900,"mtime":1643428046138,"results":"24","hashOfConfig":"15"},{"size":832,"mtime":1643172717574,"results":"25","hashOfConfig":"15"},{"size":1247,"mtime":1643355983348,"results":"26","hashOfConfig":"15"},{"size":2386,"mtime":1643412892338,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"zpfcfd",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\index.js",[],["59","60"],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\reportWebVitals.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\App.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\pages\\Home.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\queries.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\utils\\mutations.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryList.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryAdd.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInfo.js",[],"C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryEdit.js",["61","62","63"],"import { React, useState } from \"react\";\r\nimport { GET_STORY, GET_STORIES } from \"../../utils/queries\";\r\nimport { UPDATE_STORY } from \"../../utils/mutations\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\n\r\nimport StoryPages from \"./StoryPages\";\r\nimport StoryInput from \"./StoryInput\";\r\n\r\nconst templates = require(\"./templates.json\");\r\n\r\nfunction StoryEdit(props) {\r\n  let { id } = useParams();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  let title, content;\r\n  function handleCancel(id) {\r\n    navigate(`/stories/${id}`);\r\n  }\r\n\r\n  const { loading, data } = useQuery(GET_STORY, { variables: { id: id } });\r\n  const [updateStory, { dataloading, error }] = useMutation(UPDATE_STORY);\r\n  const story = data?.story || {};\r\n\r\n  let selectedTemplate = templates[0];\r\n\r\n  const [selectedPage, setSelectedPage] = useState(selectedTemplate.pages[0]);\r\n\r\n  const [variablesModel, setVariablesModel] = useState(\r\n    createVariablesModel(story)\r\n  );\r\n\r\n  console.log(variablesModel);\r\n\r\n  if (loading || dataloading) return \"Loading...\";\r\n  if (error) return `Submission error! ${error.message}`;\r\n\r\n  function createVariablesModel(story) {\r\n    return story.pages.map((page) => {\r\n      return {\r\n        id: page.id,\r\n        content: page.content,\r\n        image: page.image,\r\n        variables: page.variables.map((variable) => ({\r\n          id: variable.id,\r\n          value: variable.value,\r\n        })),\r\n      };\r\n    });\r\n  }\r\n\r\n  function pageSelected(page) {\r\n    setSelectedPage(page);\r\n  }\r\n\r\n  function variablesUpdated(varModel) {\r\n    setVariablesModel(varModel);\r\n  }\r\n\r\n  function editStory() {\r\n    const pagesToUpdate = selectedTemplate.pages.map((p) => {\r\n      let pageVariablesModel = variablesModel.find((f) => f.id === p.id);\r\n      return {\r\n        id: p.id,\r\n        image: pageVariablesModel.image,\r\n        content: pageVariablesModel.content,\r\n        variables: p.variables.map((v) => {\r\n          return {\r\n            id: v.id,\r\n            name: v.name,\r\n            description: v.description,\r\n            value: pageVariablesModel.variables.find((f) => f.id === v.id)\r\n              .value,\r\n          };\r\n        }),\r\n      };\r\n    });\r\n\r\n    updateStory({\r\n      variables: {\r\n        id: story.id,\r\n        templateId: story.templateId,\r\n        title: story.title,\r\n        pages: pagesToUpdate,\r\n      },\r\n      refetchQueries: [{ query: GET_STORIES }],\r\n    });\r\n    navigate(\"/stories/\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ float: \"left\", width: \"300px\" }}>\r\n        <StoryPages\r\n          pages={selectedTemplate.pages}\r\n          pageSelected={pageSelected}\r\n        />\r\n      </div>\r\n      <form\r\n        style={{ float: \"right\", width: \"700px\" }}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}>\r\n        <div className='form-group'>\r\n          <label>Title:</label>\r\n          <input\r\n            type='text'\r\n            className='form-control'\r\n            ref={function (node) {\r\n              return (title = node);\r\n            }} \r\n            defaultValue={story.title}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <StoryInput\r\n            selectedPage={selectedPage}\r\n            variablesModel={variablesModel}\r\n            variablesUpdated={variablesUpdated}\r\n          />\r\n          {/*     <StoryContent dynamicContent={prepareDynamicContent}/> */}\r\n        </div>\r\n        <div>\r\n          <p className='btn-group'>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-primary'\r\n              onClick={editStory}>\r\n              Update\r\n            </button>\r\n            <Link to='/stories' className='btn btn-secondary'>\r\n              Cancel\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoryEdit;\r\n","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryPages.js",["64","65"],"import { React, useState } from \"react\";\r\n\r\nfunction StoryPages(props) {\r\n  const  pages  = props.pages;\r\n  const  pageSelected  = props.pageSelected;\r\n  \r\n  const [selectedPage, setSelectedPage] = useState(pages[0]);\r\n\r\n let links = pages.map((page)=>{\r\n    return (\r\n        <div key={page.id}>\r\n               <a\r\n                 href='#'\r\n                 onClick={(e) => {\r\n                   e.preventDefault();\r\n                  setSelectedPage(page);\r\n                  pageSelected(page);\r\n                 }}>\r\n                 {page.title}\r\n               </a>\r\n               <br />\r\n               <span>{page.description}</span> <br />\r\n             </div>\r\n         );\r\n  })\r\n\r\n  return(\r\n      <div>\r\n        <ul>\r\n          <li>{links}</li>\r\n        </ul>\r\n      </div>\r\n  )\r\n\r\n  \r\n}\r\nexport default StoryPages;\r\n","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryContent.js",["66","67","68"],"import { React, useState } from \"react\";\r\n\r\nconst templates = require(\"./templates.json\");\r\n\r\nfunction StoryContent(props) {\r\n  let selectedTemplate = templates[0];\r\n\r\n  const { storyContent } = props; \r\n\r\n  console.log(selectedTemplate + \"From storyContent\");\r\n\r\n  const [selectedPage, setSelectedPage] = useState(selectedTemplate.pages[0]);\r\n  const [dynamicContent, setDynamicContent] = useState(storyContent);\r\n\r\n  console.log(selectedTemplate);\r\n  let pageVariables = selectedTemplate.pages.flatMap((page) =>\r\n    page.variables.map((v) => ({ id: page.id + \"-\" + v.id, value: \"1\" }))\r\n  );\r\n  const [variableValues, setVariableValues] = useState(pageVariables);\r\n  console.log(variableValues);\r\n\r\n  function prepareDynamicContent() {\r\n    let content = selectedPage.content;\r\n    selectedPage.variables.forEach((variable) => {\r\n      content = content.replace(\r\n        variable.name,\r\n        variableValues.find((f) => f.id === selectedPage.id + \"-\" + variable.id)\r\n          .value\r\n      );\r\n    });\r\n    setDynamicContent(content);\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <p>Page content here:</p>\r\n    \r\n      <div dangerouslySetInnerHTML={{ __html: dynamicContent }}>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoryContent;\r\n","C:\\Repos\\BootCamp\\Social-Stories\\client\\src\\components\\stories\\StoryInput.js",["69","70"],"import { React, useState, useEffect } from \"react\";\r\nimport StoryContent from \"./StoryContent\";\r\n\r\nfunction StoryInput(props) {\r\n  const selectedPage = props.selectedPage;\r\n  const varUpdated = props.variablesUpdated;\r\n  const varModel = props.variablesModel;\r\n\r\n  const [variablesModel, setVariablesModel] = useState(varModel);\r\n  const [dynamicContent, setDynamicContent] = useState(getDynamicContent());\r\n\r\n  useEffect(() => {\r\n    setDynamicContent(getDynamicContent());\r\n  });\r\n\r\n  function getDynamicContent() {\r\n    let dynContent = selectedPage.content;\r\n    selectedPage.variables.forEach((variable) => {\r\n      dynContent = dynContent.replace(\r\n        variable.name,\r\n        getVarValue(selectedPage.id, variable.id)\r\n      );\r\n    });\r\n    return dynContent;\r\n  }\r\n\r\n  function getVarValue(pageId, varId) {\r\n    return variablesModel\r\n      .find((p) => p.id === pageId)\r\n      .variables.find((v) => v.id === varId).value;\r\n  }\r\n\r\n  function getUpdatedVarModel(pageId, varId, value) {\r\n    return [...variablesModel].map((p) => {\r\n      p.variables = [...p.variables]; // clone variables\r\n\r\n      if (p.id === pageId) {\r\n        // Update variable value\r\n        p.variables.find((v) => v.id === varId).value = value;\r\n        // Update dynamic content\r\n        p.content = getDynamicContent();\r\n      }\r\n      return p;\r\n    });\r\n  }\r\n\r\n  // Dynamically changes the values of the text input fields based on the selected page\r\n\r\n  let variables = selectedPage.variables.map((variable) => {\r\n    return (\r\n      <div key={variable.id} className='form-group'>\r\n        <label>{variable.description}:</label>\r\n        <input\r\n          type='text'\r\n          className='form-control'\r\n          value={getVarValue(selectedPage.id, variable.id)}\r\n          onChange={(e) => {\r\n            setVariablesModel(\r\n              getUpdatedVarModel(selectedPage.id, variable.id, e.target.value)\r\n            );\r\n            varUpdated(variablesModel);\r\n          }}\r\n          placeholder={variable.description}></input>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        src={selectedPage.image}\r\n        style={{ width: \"200px\", height: \"150px\" }}\r\n        alt='school'\r\n      />\r\n      <div className='form-group'>{variables}</div>\r\n      <div dangerouslySetInnerHTML={{ __html: dynamicContent }}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoryInput;\r\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":17,"column":7,"nodeType":"77","messageId":"78","endLine":17,"endColumn":12},{"ruleId":"75","severity":1,"message":"79","line":17,"column":14,"nodeType":"77","messageId":"78","endLine":17,"endColumn":21},{"ruleId":"75","severity":1,"message":"80","line":18,"column":12,"nodeType":"77","messageId":"78","endLine":18,"endColumn":24},{"ruleId":"75","severity":1,"message":"81","line":7,"column":10,"nodeType":"77","messageId":"78","endLine":7,"endColumn":22},{"ruleId":"82","severity":1,"message":"83","line":12,"column":16,"nodeType":"84","endLine":18,"endColumn":21},{"ruleId":"75","severity":1,"message":"85","line":12,"column":24,"nodeType":"77","messageId":"78","endLine":12,"endColumn":39},{"ruleId":"75","severity":1,"message":"86","line":19,"column":26,"nodeType":"77","messageId":"78","endLine":19,"endColumn":43},{"ruleId":"75","severity":1,"message":"87","line":22,"column":12,"nodeType":"77","messageId":"78","endLine":22,"endColumn":33},{"ruleId":"75","severity":1,"message":"88","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":12,"column":3,"nodeType":"77","endLine":12,"endColumn":12,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'title' is assigned a value but never used.","Identifier","unusedVar","'content' is defined but never used.","'handleCancel' is defined but never used.","'selectedPage' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setSelectedPage' is assigned a value but never used.","'setVariableValues' is assigned a value but never used.","'prepareDynamicContent' is defined but never used.","'StoryContent' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDynamicContent'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [getDynamicContent] as a second argument to the useEffect Hook.",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Add dependencies array: [getDynamicContent]",{"range":"97","text":"98"},[479,479],", [getDynamicContent]"]